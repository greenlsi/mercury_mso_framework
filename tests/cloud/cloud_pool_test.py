from __future__ import annotations
import unittest
from mercury.config.cloud import CloudConfig
from mercury.model.cloud.cloud_pool import CloudPool
import mercury.logger as logger
from mercury.msg.packet.app_packet.srv_packet import *


CLOUD_ID: str = 'cloud'
REQ_PERIOD: float = 10
REQ_DEADLINE: float = 5
SESS_DEADLINE: float = 5
cloud_config: CloudConfig | None = None


def internal_advance(model: CloudPool):
    for port in model.out_ports:
        port.clear()
    model.lambdaf()
    model.deltint()


def external_advance(model: CloudPool, e: float):
    for port in model.out_ports:
        port.clear()
    model.deltext(e)
    for port in model.in_ports:
        port.clear()


class CloudPoolTestCase(unittest.TestCase):
    @staticmethod
    def prepare_scenario():
        global cloud_config
        if cloud_config is None:
            logger.set_logger_level('INFO')
            logger.add_stream_handler()
            ServicesConfig.add_service('bad_req', REQ_DEADLINE, 'periodic', {'period': REQ_PERIOD},
                                       'constant', {}, 'periodic', {'period': REQ_PERIOD})
            ServicesConfig.add_service('req_1', REQ_DEADLINE, 'periodic', {'period': REQ_PERIOD},
                                       'constant', {},'periodic', {'period': REQ_PERIOD})
            ServicesConfig.add_service('req_2', REQ_DEADLINE, 'periodic', {'period': REQ_PERIOD},
                                       'constant', {}, 'periodic', {'period': REQ_PERIOD})
            ServicesConfig.add_service('sess_1', REQ_DEADLINE, 'periodic', {'period': REQ_PERIOD},
                                       'constant', {}, 'periodic', {'period': REQ_PERIOD})
            ServicesConfig.add_service('bad_sess', REQ_DEADLINE, 'periodic', {'period': REQ_PERIOD},
                                       'constant', {}, 'periodic', {'period': REQ_PERIOD})
            ServicesConfig.add_sess_config('bad_sess', SESS_DEADLINE, False)
            ServicesConfig.add_sess_config('sess_1', SESS_DEADLINE, True)
            cloud_config = CloudConfig(CLOUD_ID)
            cloud_config.add_srv_config('req_1',  proc_t_id='constant', proc_t_config={'proc_t': 1})
            cloud_config.add_srv_config('req_2',  proc_t_id='constant', proc_t_config={'proc_t': 2})
            cloud_config.add_srv_config('sess_1', proc_t_id='constant', proc_t_config={'proc_t': 1})

    def test_cloud_pool(self):
        CloudPoolTestCase.prepare_scenario()
        cloud_pool: CloudPool = CloudPool(cloud_config)
        cloud_pool.initialize()
        self.assertEqual(inf, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)

        req_1 = SrvRequest('bad_req', 'client_1', 0, 'gateway', 'cloud', 0)
        req_1.send(0)
        req_1.receive(1)
        cloud_pool.input_requests.add(req_1)
        external_advance(cloud_pool, 1)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        internal_advance(cloud_pool)
        self.assertEqual(inf, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_1 = cloud_pool.output_responses.get()
        self.assertFalse(res_1.response)
        self.assertEqual('Cloud does not support this service', res_1.trace)

        req_1 = SrvRequest('req_1', 'client_1', 0, 'gateway', 'cloud', 0)
        req_1.send(0)
        req_1.receive(1)
        cloud_pool.input_requests.add(req_1)
        external_advance(cloud_pool, 0)
        self.assertEqual(1, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_1, cloud_pool.requests[('req_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(2 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[2]))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.timeline[2])

        cloud_pool.input_requests.add(req_1)
        external_advance(cloud_pool, 0.5)
        self.assertEqual(0.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_1, cloud_pool.requests[('req_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(2 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[2]))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.timeline[2])

        req_2 = SrvRequest('req_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_2.send(0)
        req_2.receive(1.5)
        cloud_pool.input_requests.add(req_2)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_1, cloud_pool.requests[('req_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(2 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[2]))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.timeline[2])
        internal_advance(cloud_pool)
        self.assertEqual(0.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_1, cloud_pool.requests[('req_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(2 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[2]))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.timeline[2])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_2 = cloud_pool.output_responses.get()
        self.assertFalse(res_2.response)
        self.assertEqual('Cloud is busy with a different request of the same client', res_2.trace)

        req_2 = SrvRequest('req_2', 'client_1', 1, 'gateway', 'cloud', 0)
        req_2.send(0)
        req_2.receive(1.5)
        cloud_pool.input_requests.add(req_2)
        external_advance(cloud_pool, 0)
        self.assertEqual(0.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(2, len(cloud_pool.requests))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_1, cloud_pool.requests[('req_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(2, len(cloud_pool.timeline))
        self.assertTrue(2 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[2]))
        self.assertTrue(('req_1', 'client_1') in cloud_pool.timeline[2])
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])

        internal_advance(cloud_pool)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])

        internal_advance(cloud_pool)
        self.assertEqual(1.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_1 = cloud_pool.output_responses.get()
        self.assertEqual(req_1, res_1.request)
        self.assertTrue(res_1.response)
        self.assertIsNone(res_1.trace)

        req_3 = SrvRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_3.send(0)
        req_3.receive(1.5)
        cloud_pool.input_requests.add(req_3)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_3 = cloud_pool.output_responses.get()
        self.assertEqual(req_3, res_3.request)
        self.assertFalse(res_3.response)
        self.assertEqual('Bad cloud mapping: required session does not exist', res_3.trace)

        req_3 = OpenSessRequest('bad_sess', 'client_1', 1, 'gateway', 'cloud', 0)
        req_3.send(0)
        req_3.receive(1.5)
        cloud_pool.input_requests.add(req_3)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_3 = cloud_pool.output_responses.get()
        self.assertEqual(req_3, res_3.request)
        self.assertIsNone(res_3.response)
        self.assertEqual('Cloud does not support this service', res_3.trace)

        req_3 = CloseSessRequest('bad_sess', 'client_1', 1, 'gateway', 'cloud', 0)
        req_3.send(0)
        req_3.receive(1.5)
        cloud_pool.input_requests.add(req_3)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1.5, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_3 = cloud_pool.output_responses.get()
        self.assertEqual(req_3, res_3.request)
        self.assertEqual(0, res_3.response)
        self.assertEqual('Service session does not exist', res_3.trace)

        req_3 = OpenSessRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_3.send(0)
        req_3.receive(1.5)
        cloud_pool.input_requests.add(req_3)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1.5, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_3 = cloud_pool.output_responses.get()
        self.assertEqual(req_3, res_3.request)
        self.assertEqual('cloud', res_3.response)
        self.assertIsNone(res_3.trace)

        req_3 = OpenSessRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_3.send(0)
        req_3.receive(2)
        cloud_pool.input_requests.add(req_3)
        external_advance(cloud_pool, 0.5)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 0.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.requests))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 0.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(1, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertEqual(1, len(cloud_pool.output_responses))
        res_3 = cloud_pool.output_responses.get()
        self.assertEqual(req_3, res_3.request)
        self.assertEqual('cloud', res_3.response)
        self.assertEqual('Service session is already opened', res_3.trace)

        req_4 = SrvRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_4.send(0)
        req_4.receive(2)
        cloud_pool.input_requests.add(req_4)
        external_advance(cloud_pool, 0)
        self.assertEqual(1, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 0.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_4, cloud_pool.requests[('sess_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(2, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.timeline[3.5])

        req_5 = CloseSessRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_5.send(0)
        req_5.receive(2)
        cloud_pool.input_requests.add(req_5)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 0.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_4, cloud_pool.requests[('sess_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(2, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.timeline[3.5])
        internal_advance(cloud_pool)
        self.assertEqual(1, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 0.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertTrue(('req_2', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_2, cloud_pool.requests[('req_2', 'client_1')])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.requests)
        self.assertEqual(req_4, cloud_pool.requests[('sess_1', 'client_1')])
        self.assertEqual(1, len(cloud_pool.timeline))
        self.assertTrue(3.5 in cloud_pool.timeline)
        self.assertEqual(2, len(cloud_pool.timeline[3.5]))
        self.assertTrue(('req_2', 'client_1') in cloud_pool.timeline[3.5])
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.timeline[3.5])
        res_5 = cloud_pool.output_responses.get()
        self.assertEqual(req_5, res_5.request)
        self.assertEqual(-1, res_5.response)
        self.assertEqual('Service session is busy and cannot be closed', res_5.trace)

        internal_advance(cloud_pool)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 1.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        self.assertEqual(0, len(cloud_pool.output_responses))

        internal_advance(cloud_pool)
        self.assertEqual(inf, cloud_pool.sigma)
        self.assertEqual(1, len(cloud_pool.sessions))
        self.assertTrue(('sess_1', 'client_1') in cloud_pool.sessions)
        self.assertEqual(cloud_pool._clock - 1.5, cloud_pool.sessions[('sess_1', 'client_1')])
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        self.assertEqual(2, len(cloud_pool.output_responses))
        responses = [response for response in cloud_pool.output_responses.values]
        self.assertEqual(req_2, responses[0].request)
        self.assertTrue(responses[0].response)
        self.assertIsNone(responses[0].trace)
        self.assertEqual(req_4, responses[1].request)
        self.assertTrue(responses[1].response)
        self.assertIsNone(responses[1].trace)

        req_5 = CloseSessRequest('sess_1', 'client_1', 1, 'gateway', 'cloud', 0)
        req_5.send(0)
        req_5.receive(2)
        cloud_pool.input_requests.add(req_5)
        external_advance(cloud_pool, 0)
        self.assertEqual(0, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        internal_advance(cloud_pool)
        self.assertEqual(inf, cloud_pool.sigma)
        self.assertFalse(cloud_pool.sessions)
        self.assertFalse(cloud_pool.requests)
        self.assertFalse(cloud_pool.timeline)
        res_5 = cloud_pool.output_responses.get()
        self.assertEqual(req_5, res_5.request)
        self.assertEqual(1.5, res_5.response)
        self.assertIsNone(res_5.trace)


if __name__ == '__main__':
    unittest.main()
