import unittest
import mercury.logger as logger
from mercury.model.clients.client.acc_manager import AccessManager, inf
from mercury.msg.client import ServiceActive
from mercury.msg.network import NewNodeLocation
from mercury.msg.packet.app_packet.acc_packet import *
from mercury.config.gateway import GatewaysConfig
from mercury.config.network import WiredNodeConfig, WirelessNodeConfig
from xdevs.models import Atomic

logger.set_logger_level('INFO')
logger.add_stream_handler()


def internal_advance(model: Atomic):
    for port in model.out_ports:
        port.clear()
    model.lambdaf()
    model.deltint()


def external_advance(model: Atomic, e: float):
    for port in model.out_ports:
        port.clear()
    model.deltext(e)
    for port in model.in_ports:
        port.clear()


class AccessManagerTestCase(unittest.TestCase):
    def test_wired(self):
        client_id = 'client'
        gateway_id = 'gateway'
        t_start = 10
        t_end = 100
        location = (0, 0)
        client_config = WiredNodeConfig(client_id, gateway_id, t_start, t_end, location)

        manager = AccessManager(client_config)
        manager.initialize()

        self.assertTrue(manager.wired)
        self.assertTrue(manager.connection_req)
        self.assertEqual(t_start, manager._clock)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(gateway_id, manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        self.assertFalse(manager.active_srv)
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, gateway_id)
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertTrue(manager.wired)
        self.assertTrue(manager.connection_req)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(gateway_id, manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        self.assertEqual(1, len(manager.active_srv))
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, gateway_id)
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertTrue(manager.wired)
        self.assertTrue(manager.connection_req)
        self.assertEqual(gateway_id, manager.next_gw)
        self.assertEqual(gateway_id, manager.gateway)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)
        self.assertEqual(1, len(manager.active_srv))
        internal_advance(manager)
        self.assertTrue(manager.output_connected.get())
        self.assertEqual(client_id, manager.output_gateway.get().client_id)
        self.assertEqual(gateway_id, manager.output_gateway.get().gateway_id)
        self.assertEqual(manager.sigma, inf)
        self.assertEqual(1, len(manager.active_srv))

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 1)
        self.assertFalse(manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, t_end - manager._clock)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        manager.input_srv_active.add(ServiceActive(client_id, 'service_2', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv and 'service_2' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)
        self.assertFalse(manager.ready_to_dump)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_2', False))
        external_advance(manager, t_end)
        self.assertTrue('service_1' in manager.active_srv and 'service_2' not in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)
        self.assertFalse(manager.ready_to_dump)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 1)
        self.assertFalse(manager.active_srv)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(manager.sigma, 0)
        self.assertFalse(manager.ready_to_dump)

        internal_advance(manager)
        self.assertFalse(manager.output_connected.get())
        self.assertEqual(client_id, manager.output_gateway.get().client_id)
        self.assertIsNone(manager.output_gateway.get().gateway_id)
        self.assertEqual(manager.next_gw, gateway_id)
        self.assertEqual(gateway_id, manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertFalse(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)
        disconn_req = manager.aux_req
        self.assertIsInstance(disconn_req, DisconnectRequest)

        disconn_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(disconn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertEqual(manager.aux_req, manager.output_acc.get())
        self.assertIsInstance(manager.aux_req, DisconnectRequest)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(manager.next_gw, gateway_id)
        self.assertEqual(gateway_id, manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertFalse(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.aux_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(manager.aux_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(manager.next_gw, gateway_id)
        self.assertIsNone(manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertTrue(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertEqual(inf, manager.sigma)

    def test_wireless_connect(self):
        pss_window = 1e-3
        GatewaysConfig.PSS_WINDOW = pss_window

        client_id = 'client'
        t_start = 10
        t_end = 100
        client_config = WirelessNodeConfig(client_id, t_start, t_end, 'still', {'location': (0, 0)})

        manager = AccessManager(client_config)
        manager.initialize()

        self.assertFalse(manager.wired)
        self.assertTrue(manager.connection_req)
        self.assertEqual(t_start, manager._clock)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(0, manager.sigma)
        self.assertFalse(manager.active_srv)

        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertIsNone(manager.output_send_pss.get().best_gw)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 0)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        self.assertFalse(manager.active_srv)
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, 'gateway_1')
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        manager.input_new_location.add(NewNodeLocation(client_id, (2, 2)))
        external_advance(manager, 0)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertEqual(manager.sigma, inf)
        self.assertTrue(manager.output_send_pss)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertFalse(manager.perceived_snr)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)

        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        manager.input_new_location.add(NewNodeLocation(client_id, (1, 1)))
        external_advance(manager, 0)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 0)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        self.assertFalse(manager.active_srv)
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, 'gateway_1')
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertTrue(manager.perceived_snr)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertTrue(manager.output_connected.get())
        self.assertEqual(client_id, manager.output_gateway.get().client_id)
        self.assertEqual('gateway_1', manager.output_gateway.get().gateway_id)
        self.assertEqual(manager.sigma, t_end - manager._clock)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 0
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 1
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 0)
        self.assertFalse(manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertIsNone(manager.next_gw)
        self.assertIsInstance(manager.output_acc.get(), RRCMessage)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(t_end - manager._clock, manager.sigma)

        ho_data = HandOverData(client_id, 'gateway_1', 'gateway_2')
        ho_request = HandOverRequest(ho_data, manager._clock)
        manager.input_acc.add(StartHandOver(ho_data, manager._clock))
        external_advance(manager, 1)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertEqual('gateway_2', manager.next_gw)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertEqual('gateway_2', manager.next_gw)
        self.assertFalse(manager.output_connected.get())
        self.assertIsNone(manager.output_gateway.get().gateway_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.input_acc.add(HandOverResponse(ho_request, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertIsNone(manager.next_gw)
        self.assertTrue(manager.output_connected.get())
        self.assertEqual('gateway_1', manager.output_gateway.get().gateway_id)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(t_end - manager._clock, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)

        ho_data = HandOverData(client_id, 'gateway_1', 'gateway_2')
        ho_request = HandOverRequest(ho_data, manager._clock)
        manager.input_acc.add(StartHandOver(ho_data, manager._clock))
        external_advance(manager, 1)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertEqual('gateway_2', manager.next_gw)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertEqual('gateway_2', manager.next_gw)
        self.assertFalse(manager.output_connected.get())
        self.assertIsNone(manager.output_gateway.get().gateway_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 1)
        self.assertFalse(manager.active_srv)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(manager.sigma, inf)

        manager.input_acc.add(HandOverResponse(ho_request, True, manager._clock))
        external_advance(manager, t_end)
        self.assertEqual('gateway_2', manager.gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        disconn_req = manager.aux_req
        self.assertIsInstance(disconn_req, DisconnectRequest)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)

        disconn_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(disconn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertEqual(manager.aux_req, manager.output_acc.get())
        self.assertIsInstance(manager.aux_req, DisconnectRequest)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_2', manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertFalse(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.aux_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(manager.aux_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertTrue(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertEqual(inf, manager.sigma)

    def test_wireless_disconnect(self):
        pss_window = 1e-3
        GatewaysConfig.PSS_WINDOW = pss_window

        client_id = 'client'
        t_start = 10
        t_end = 100
        client_config = WirelessNodeConfig(client_id, t_start, t_end, 'still', {'location': (0, 0)}, keep_connected=False)

        manager = AccessManager(client_config)
        manager.initialize()
        self.assertFalse(manager.wired)
        self.assertFalse(manager.connection_req)
        self.assertEqual(t_start, manager._clock)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(inf, manager.sigma)
        self.assertFalse(manager.active_srv)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        manager.input_acc.add(pss_1)
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertEqual(inf, manager.sigma)
        self.assertFalse(manager.perceived_snr)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue(manager.connection_req)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 0)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, 'gateway_1')
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertFalse(manager.perceived_snr)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)

        internal_advance(manager)
        self.assertIsNone(manager.gateway)
        self.assertIsNone(manager.aux_req)
        self.assertTrue(manager.connection_req)
        self.assertFalse(manager.perceived_snr)
        self.assertEqual(client_id, manager.output_send_pss.get().client_id)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 0)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        internal_advance(manager)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertIsInstance(manager.aux_req, ConnectRequest)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        conn_req = manager.output_acc.get()
        self.assertIsInstance(conn_req, ConnectRequest)
        self.assertEqual(manager.aux_req, conn_req)
        self.assertFalse(manager.output_gateway)
        self.assertEqual(conn_req.gateway_id, 'gateway_1')
        self.assertEqual(conn_req.client_id, client_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        conn_req.receive(manager._clock)
        manager.input_acc.add(ConnectResponse(conn_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertTrue(manager.perceived_snr)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertTrue(manager.output_connected.get())
        self.assertEqual(client_id, manager.output_gateway.get().client_id)
        self.assertEqual('gateway_1', manager.output_gateway.get().gateway_id)
        self.assertEqual(manager.sigma, inf)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 1
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 0
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertEqual(manager.sigma, inf)

        pss_1 = PSSMessage('gateway_1', client_id, manager._clock)
        pss_1.snr = 0
        pss_1.send(manager._clock)
        pss_2 = PSSMessage('gateway_2', client_id, manager._clock)
        pss_2.snr = 1
        pss_2.send(manager._clock)
        manager.input_acc.add(pss_1)
        manager.input_acc.add(pss_2)
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertAlmostEqual(GatewaysConfig.PSS_WINDOW, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 0)
        self.assertFalse(manager.active_srv)
        disconn_req = manager.aux_req
        self.assertIsInstance(disconn_req, DisconnectRequest)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        self.assertFalse(manager.output_connected.get())
        self.assertIsNone(manager.output_gateway.get().gateway_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)

        disconn_req = manager.aux_req
        disconn_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(disconn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertEqual(manager.aux_req, manager.output_acc.get())
        self.assertIsInstance(manager.aux_req, DisconnectRequest)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertFalse(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', True))
        external_advance(manager, 1)
        self.assertTrue('service_1' in manager.active_srv)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(manager.sigma, inf)

        disconn_req = manager.aux_req
        disconn_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(disconn_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_AWAIT_CONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)

        manager.input_acc.add(ConnectResponse(manager.aux_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_CONNECTED, manager.phase)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_2', manager.gateway)
        self.assertTrue(manager.perceived_snr)
        self.assertIsNone(manager.aux_req)
        self.assertEqual(manager.sigma, 0)
        internal_advance(manager)
        self.assertTrue(manager.output_connected.get())
        self.assertEqual(client_id, manager.output_gateway.get().client_id)
        self.assertEqual('gateway_2', manager.output_gateway.get().gateway_id)
        self.assertEqual(manager.sigma, inf)

        ho_data = HandOverData(client_id, 'gateway_2', 'gateway_1')
        ho_request = HandOverRequest(ho_data, manager._clock)
        manager.input_acc.add(StartHandOver(ho_data, manager._clock))
        external_advance(manager, 1)
        self.assertEqual('gateway_2', manager.gateway)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        self.assertEqual('gateway_2', manager.gateway)
        self.assertEqual('gateway_1', manager.next_gw)
        self.assertFalse(manager.output_connected.get())
        self.assertIsNone(manager.output_gateway.get().gateway_id)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.input_srv_active.add(ServiceActive(client_id, 'service_1', False))
        external_advance(manager, 1)
        self.assertFalse(manager.active_srv)
        self.assertEqual(AccessManager.PHASE_AWAIT_HO, manager.phase)
        self.assertEqual(manager.sigma, inf)

        manager.input_acc.add(HandOverResponse(ho_request, True, manager._clock))
        external_advance(manager, 1)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)

        internal_advance(manager)
        disconn_req = manager.aux_req
        self.assertIsInstance(disconn_req, DisconnectRequest)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)

        disconn_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(disconn_req, False, manager._clock))
        external_advance(manager, 1)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(0, manager.sigma)
        internal_advance(manager)
        self.assertEqual(manager.aux_req, manager.output_acc.get())
        self.assertIsInstance(manager.aux_req, DisconnectRequest)
        self.assertFalse(manager.output_connected)
        self.assertFalse(manager.output_gateway)
        self.assertIsNone(manager.next_gw)
        self.assertEqual('gateway_1', manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertFalse(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_AWAIT_DISCONNECTION, manager.phase)
        self.assertEqual(inf, manager.sigma)

        manager.aux_req.receive(manager._clock)
        manager.input_acc.add(DisconnectResponse(manager.aux_req, True, manager._clock))
        external_advance(manager, 1)
        self.assertIsNone(manager.next_gw)
        self.assertIsNone(manager.gateway)
        self.assertFalse(manager.connection_req)
        self.assertTrue(manager.ready_to_dump)
        self.assertEqual(AccessManager.PHASE_DISCONNECTED, manager.phase)
        self.assertEqual(inf, manager.sigma)
