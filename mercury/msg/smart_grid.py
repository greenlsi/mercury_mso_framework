from typing import Any, Optional


class ElectricityOffer:
    def __init__(self, provider_id: str, cost: Optional[float]):
        """
        New Energy Provider electricity offer.
        :param provider_id: Provider identifier.
        :param cost: cost of new electricity offer per W·h.
        """
        self.provider_id: str = provider_id
        self.cost: Optional[float] = cost


class PowerDemandReport:
    def __init__(self, consumer_id: str, power: float, report: Optional[Any] = None):
        """
        Smart Grid node power demand report.
        :param consumer_id: consumer identifier.
        :param power: overall amount of power (in Watts) demanded by the node.
        :param report: any additional report related to the demand of the node.
        """
        self.consumer_id: str = consumer_id
        self.power: float = power
        self.report: Optional[Any] = report


class PowerSourceReport:
    def __init__(self, consumer_id: str, source_id: str, power: float):
        """
        Report of the power generated by a given source.
        :param consumer_id: consumer identifier.
        :param source_id: electricity source identifier.
        :param power: power generated by the electricity source (in Watts).
        """
        self.consumer_id: str = consumer_id
        self.source_id: str = source_id
        self.power: float = power


class PowerConsumptionReport:
    def __init__(self, consumer_id: str, provider_id: Optional[str], electricity_cost: Optional[float],
                 power_demand: float, power_generation: float, charge_from_grid: bool, allow_discharge: bool,
                 power_storage: float, energy_stored: float, energy_capacity: float, report: Optional[Any] = None):
        """
        Report of the power consumption of a node.
        :param consumer_id: consumer identifier.
        :param provider_id: energy provider ID.
        :param electricity_cost: cost of the electricity.
        :param power_demand: overall amount of power (in Watts) demanded by the node.
        :param power_generation: overall amount of power (in Watts) generated by the node.
        :param charge_from_grid: True if battery is allowed to consume energy to charge itself.
        :param allow_discharge: True if consumer is allowed to discharge the battery to address the power demand.
        :param power_storage: overall amount of power (in Watts) used by the node for storing energy.
        :param energy_stored: overall amount of energy (in W·h) stored by the node.
        :param energy_capacity: maximum amount of energy (in W·h) that can be stored by the node.
        :param report: any additional report related to the consumption of the node.
        """
        self.consumer_id: str = consumer_id
        self.provider_id: Optional[str] = provider_id
        self.electricity_cost: Optional[float] = electricity_cost
        self.power_demand: float = power_demand
        self.power_generation: float = power_generation
        self.charge_from_grid: bool = charge_from_grid
        self.allow_discharge: bool = allow_discharge
        self.power_storage: float = power_storage
        self.energy_stored: float = energy_stored
        self.energy_capacity: float = energy_capacity
        self.report: Optional[Any] = report

    @property
    def power_consumption(self) -> float:
        return self.power_demand - self.power_generation + self.power_storage
