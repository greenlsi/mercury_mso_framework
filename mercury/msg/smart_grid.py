from __future__ import annotations
from abc import ABC, abstractmethod


class EnergyDemand(ABC):
    def __init__(self):
        self.consumption: EnergyConsumption | None = None

    @property
    @abstractmethod
    def consumer_id(self) -> str:
        pass

    @property
    @abstractmethod
    def power_demand(self) -> float:
        pass

    @property
    def power_consumption(self) -> float:
        return self.power_demand if self.consumption is None else self.consumption.power_consumption


class PowerGeneration:
    def __init__(self, consumer_id: str, generator_id: str, power: float):
        """
        Report of the power generated by a given source.
        :param consumer_id: consumer identifier.
        :param generator_id: energy generator identifier.
        :param power: power generated by the electricity source (in Watts).
        """
        self.consumer_id: str = consumer_id
        self.generator_id: str = generator_id
        self.power: float = power


class EnergyStorage:
    def __init__(self, allow_charge: bool, allow_discharge: bool,
                 power_storage: float, energy_stored: float, energy_capacity: float):
        """
        Energy storage report for smart grid models.
        :param allow_charge: True if battery is allowed to consume energy to charge itself.
        :param allow_discharge: True if consumer is allowed to discharge the battery to address the power demand.
        :param power_storage: overall amount of power (in Watts) used by the node for storing energy.
        :param energy_stored: overall amount of energy (in W·h) stored by the node.
        :param energy_capacity: maximum amount of energy (in W·h) that can be stored by the node.
        """
        self.allow_charge: bool = allow_charge
        self.allow_discharge: bool = allow_discharge
        self.power_storage: power_storage = power_storage
        self.energy_stored: energy_stored = energy_stored
        self.energy_capacity: energy_capacity = energy_capacity


class EnergyOffer:
    def __init__(self, provider_id: str, cost: float | None):
        """
        Energy offer report.
        :param provider_id: Provider identifier.
        :param cost: cost of new electricity offer per W·h.
        """
        self.provider_id: str = provider_id
        self.cost: float | None = cost


class EnergyConsumption(EnergyDemand):
    def __init__(self, energy_demand: EnergyDemand, power_generation: float,
                 energy_storage: EnergyStorage | None, energy_offer: EnergyOffer | None,
                 acc_energy_consumption: float, acc_energy_returned: float, acc_cost: float):
        """
        Report of the power consumption of a node.
        :param energy_demand: energy demand.
        :param power_generation: overall amount of power (in Watts) generated by the node.
        :param energy_storage: Energy storage report of the node.
        :param energy_offer: energy offer.
        """
        super().__init__()
        self.energy_demand: EnergyDemand = energy_demand
        self.power_generation: float = power_generation
        self.energy_storage: EnergyStorage | None = energy_storage
        self.energy_offer: EnergyOffer | None = energy_offer
        self.acc_energy_consumption: float = acc_energy_consumption
        self.acc_energy_returned: float = acc_energy_returned
        self.acc_cost: float = acc_cost
        self.energy_demand.consumption = self

    @property
    def consumer_id(self) -> str:
        return self.energy_demand.consumer_id

    @property
    def power_demand(self) -> float:
        return self.energy_demand.power_demand

    @property
    def power_consumption(self) -> float:
        return self.energy_demand.power_demand - self.power_generation + self.power_storage

    @property
    def provider_id(self) -> str | None:
        if self.energy_offer is not None:
            return self.energy_offer.provider_id

    @property
    def energy_cost(self) -> float | None:
        if self.energy_offer is not None:
            return self.energy_offer.cost

    @property
    def allow_charge(self) -> bool:
        return self.energy_storage is not None and self.energy_storage.allow_charge

    @property
    def allow_discharge(self) -> bool:
        return self.energy_storage is not None and self.energy_storage.allow_discharge

    @property
    def power_storage(self) -> float:
        return 0 if self.energy_storage is None else self.energy_storage.power_storage

    @property
    def energy_stored(self) -> float:
        return 0 if self.energy_storage is None else self.energy_storage.energy_stored

    @property
    def energy_capacity(self) -> float:
        return 0 if self.energy_storage is None else self.energy_storage.energy_capacity
